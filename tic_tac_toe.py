# -*- coding: utf-8 -*-
"""tic_tac_toe_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-aOSjwJxOGaWIb8Dc9rv5zbnFr8l7bYP
"""

def reset_jogo():
  global back_estrutura, front_estrutura
  back_estrutura = [[0,0,0],[0,0,0],[0,0,0]]
  front_estrutura = [[0,0,0],[0,0,0],[0,0,0]]
  return back_estrutura, front_estrutura


def apresentacao_front():
  for x, b in enumerate(back_estrutura):
    for i, e in enumerate(b):
      if back_estrutura[x][i] == 1:
        front_estrutura[x][i] = '  X'
      elif back_estrutura[x][i] == -1:
          front_estrutura[x][i] = '  O'
      else:
        front_estrutura[x][i] = ''


def visual_jogo():
  apresentacao_front()
  print('    1     2     3  ')
  print(f'A {front_estrutura[0][0]:3}  |{front_estrutura[0][1]:3}  |{front_estrutura[0][2]:3}')
  print('   ----|-----|----')
  print(f'B {front_estrutura[1][0]:3}  |{front_estrutura[1][1]:3}  |{front_estrutura[1][2]:3}')
  print('   ----|-----|----')
  print(f'C {front_estrutura[2][0]:3}  |{front_estrutura[2][1]:3}  |{front_estrutura[2][2]:3}')
# visual_jogo()


def jogada1():
  # count += 1
  prim_jogada = str(input('Xis, sua vez: ')).upper()
  if prim_jogada[0] == 'A':
    if back_estrutura[0][(int(prim_jogada[1]))-1] == 0:
      back_estrutura[0][(int(prim_jogada[1]))-1] = 1
  elif prim_jogada[0] == 'B':
    if back_estrutura[1][(int(prim_jogada[1]))-1] == 0:
      back_estrutura[1][(int(prim_jogada[1]))-1] = 1
  elif prim_jogada[0] == 'C':
    if back_estrutura[2][(int(prim_jogada[1]))-1] == 0:
      back_estrutura[2][(int(prim_jogada[1]))-1] = 1


def jogada2():
  # count += 1
  sec_jogada = str(input('Bolinha, sua vez: ')).upper()
  if sec_jogada[0] == 'A':
    if back_estrutura[0][(int(sec_jogada[1]))-1] == 0:
      back_estrutura[0][(int(sec_jogada[1]))-1] = -1
  elif sec_jogada[0] == 'B':
    if back_estrutura[1][(int(sec_jogada[1]))-1] == 0:
      back_estrutura[1][(int(sec_jogada[1]))-1] = -1
  elif sec_jogada[0] == 'C':
    if back_estrutura[2][(int(sec_jogada[1]))-1] == 0:
      back_estrutura[2][(int(sec_jogada[1]))-1] = -1


def results():
  global result
  result = ''
  soma_col_1 = (back_estrutura[0][0] + back_estrutura[1][0] + back_estrutura[2][0])
  soma_col_2 = (back_estrutura[0][1] + back_estrutura[1][1] + back_estrutura[2][1])
  soma_col_3 = (back_estrutura[0][2] + back_estrutura[1][2] + back_estrutura[2][2])

  soma_diag_1 = (back_estrutura[0][0] + back_estrutura[1][1] + back_estrutura[2][2])
  soma_diag_2 = (back_estrutura[2][0] + back_estrutura[1][1] + back_estrutura[0][2])

  soma_lin_A = sum(back_estrutura[0])
  soma_lin_B = sum(back_estrutura[1])
  soma_lin_C = sum(back_estrutura[2])

  if soma_col_1 == 3 or soma_col_2 == 3 or soma_col_3 == 3 or soma_lin_A == 3 or soma_lin_B == 3 or soma_lin_C == 3:
    result = 'X ganhou!'
  elif soma_col_1 == -3 or soma_col_2 == -3 or soma_col_3 == -3 or soma_lin_A == -3 or soma_lin_B == -3 or soma_lin_C == -3:
    result = 'O ganhou!'
  elif soma_diag_1 == 3 or soma_diag_2 == 3:
    result = 'X ganhou!'
  elif soma_diag_1 == -3 or soma_diag_2 == -3:
    result = 'O ganhou!'
  return result

reset_jogo()
visual_jogo()
count = 0

while True:
  fim = results()
  if fim == 'X ganhou!' or fim == 'O ganhou!':
    break
  jogada1()
  count += 1
  fim = results()
  if fim == 'X ganhou!' or fim == 'O ganhou!':
    break
  visual_jogo()
  if count >= 9:
    print('empate!')
    break
  jogada2()
  count += 1
  fim = results()
  if fim == 'X ganhou!' or fim == 'O ganhou!':
    break
  visual_jogo()
visual_jogo()
print()
print(f'    {result}    ')